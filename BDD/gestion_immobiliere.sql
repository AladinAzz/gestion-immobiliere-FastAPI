-- MySQL Script generated by MySQL Workbench
-- Mon Dec  9 00:34:03 2024
-- Model: New Model    Version: 1.0
-- MySQL Workbench Forward Engineering

SET @OLD_UNIQUE_CHECKS=@@UNIQUE_CHECKS, UNIQUE_CHECKS=0;
SET @OLD_FOREIGN_KEY_CHECKS=@@FOREIGN_KEY_CHECKS, FOREIGN_KEY_CHECKS=0;
SET @OLD_SQL_MODE=@@SQL_MODE, SQL_MODE='ONLY_FULL_GROUP_BY,STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_ENGINE_SUBSTITUTION';

-- -----------------------------------------------------
-- Schema mydb
-- -----------------------------------------------------
SHOW WARNINGS;
-- -----------------------------------------------------
-- Schema gestion_immobiliere
-- -----------------------------------------------------
DROP SCHEMA IF EXISTS `gestion_immobiliere` ;

-- -----------------------------------------------------
-- Schema gestion_immobiliere
-- -----------------------------------------------------
CREATE SCHEMA IF NOT EXISTS `gestion_immobiliere` DEFAULT CHARACTER SET utf8mb4 COLLATE utf8mb4_0900_ai_ci ;
SHOW WARNINGS;
USE `gestion_immobiliere` ;

-- -----------------------------------------------------
-- Table `gestion_immobiliere`.`administrateur`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `gestion_immobiliere`.`administrateur` ;

SHOW WARNINGS;
CREATE TABLE IF NOT EXISTS `gestion_immobiliere`.`administrateur` (
  `id_admin` INT NOT NULL AUTO_INCREMENT,
  `id_utilisateur` INT NULL DEFAULT NULL,
  PRIMARY KEY (`id_admin`),
  CONSTRAINT `fk_admin_utilisateur`
    FOREIGN KEY (`id_utilisateur`)
    REFERENCES `gestion_immobiliere`.`utilisateur` (`id_utilisateur`)
    ON DELETE CASCADE)
ENGINE = InnoDB
AUTO_INCREMENT = 5
DEFAULT CHARACTER SET = utf8mb4
COLLATE = utf8mb4_0900_ai_ci;

SHOW WARNINGS;
CREATE INDEX `fk_admin_utilisateur` ON `gestion_immobiliere`.`administrateur` (`id_utilisateur` ASC) VISIBLE;

SHOW WARNINGS;

-- -----------------------------------------------------
-- Table `gestion_immobiliere`.`agent`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `gestion_immobiliere`.`agent` ;

SHOW WARNINGS;
CREATE TABLE IF NOT EXISTS `gestion_immobiliere`.`agent` (
  `id_agent` INT NOT NULL AUTO_INCREMENT,
  `id_utilisateur` INT NULL DEFAULT NULL,
  PRIMARY KEY (`id_agent`),
  CONSTRAINT `fk_agent_utilisateur`
    FOREIGN KEY (`id_utilisateur`)
    REFERENCES `gestion_immobiliere`.`utilisateur` (`id_utilisateur`)
    ON DELETE CASCADE)
ENGINE = InnoDB
AUTO_INCREMENT = 30
DEFAULT CHARACTER SET = utf8mb4
COLLATE = utf8mb4_0900_ai_ci;

SHOW WARNINGS;
CREATE INDEX `fk_agent_utilisateur` ON `gestion_immobiliere`.`agent` (`id_utilisateur` ASC) VISIBLE;

SHOW WARNINGS;

-- -----------------------------------------------------
-- Table `gestion_immobiliere`.`bien`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `gestion_immobiliere`.`bien` ;

SHOW WARNINGS;
CREATE TABLE IF NOT EXISTS `gestion_immobiliere`.`bien` (
  `id_bien` INT NOT NULL AUTO_INCREMENT,
  `adresse` VARCHAR(100) NULL DEFAULT NULL,
  `superficie` INT NULL DEFAULT NULL,
  `etat` ENUM('loue', 'vendu', 'dispo') NULL DEFAULT NULL,
  `type` ENUM('villa', 'maison', 'appartement', 'bureau') NULL DEFAULT NULL,
  `ville` VARCHAR(50) NULL DEFAULT NULL,
  `id_proprietaire` INT NULL DEFAULT NULL,
  `id_agent` INT NULL DEFAULT NULL,
  PRIMARY KEY (`id_bien`),
  CONSTRAINT `fk_bien_agent`
    FOREIGN KEY (`id_agent`)
    REFERENCES `gestion_immobiliere`.`agent` (`id_agent`)
    ON DELETE CASCADE,
  CONSTRAINT `fk_bien_proprietaire`
    FOREIGN KEY (`id_proprietaire`)
    REFERENCES `gestion_immobiliere`.`proprietaire` (`id_proprietaire`)
    ON DELETE CASCADE)
ENGINE = InnoDB
AUTO_INCREMENT = 21
DEFAULT CHARACTER SET = utf8mb4
COLLATE = utf8mb4_0900_ai_ci;

SHOW WARNINGS;
CREATE INDEX `fk_bien_proprietaire` ON `gestion_immobiliere`.`bien` (`id_proprietaire` ASC) VISIBLE;

SHOW WARNINGS;
CREATE INDEX `fk_bien_agent` ON `gestion_immobiliere`.`bien` (`id_agent` ASC) VISIBLE;

SHOW WARNINGS;

-- -----------------------------------------------------
-- Table `gestion_immobiliere`.`demande_maintenance`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `gestion_immobiliere`.`demande_maintenance` ;

SHOW WARNINGS;
CREATE TABLE IF NOT EXISTS `gestion_immobiliere`.`demande_maintenance` (
  `id_demande` INT NOT NULL AUTO_INCREMENT,
  `id_locataire` INT NULL DEFAULT NULL,
  `id_location` INT NULL DEFAULT NULL,
  `description` TEXT NULL DEFAULT NULL,
  `date_demande` DATE NULL DEFAULT NULL,
  `etat` VARCHAR(20) NULL DEFAULT NULL,
  PRIMARY KEY (`id_demande`),
  CONSTRAINT `fk_demande_locataire`
    FOREIGN KEY (`id_locataire`)
    REFERENCES `gestion_immobiliere`.`locataire` (`id_locataire`)
    ON DELETE CASCADE,
  CONSTRAINT `fk_demande_location`
    FOREIGN KEY (`id_location`)
    REFERENCES `gestion_immobiliere`.`location` (`id_location`)
    ON DELETE CASCADE)
ENGINE = InnoDB
DEFAULT CHARACTER SET = utf8mb4
COLLATE = utf8mb4_0900_ai_ci;

SHOW WARNINGS;
CREATE INDEX `fk_demande_locataire` ON `gestion_immobiliere`.`demande_maintenance` (`id_locataire` ASC) VISIBLE;

SHOW WARNINGS;
CREATE INDEX `fk_demande_location` ON `gestion_immobiliere`.`demande_maintenance` (`id_location` ASC) VISIBLE;

SHOW WARNINGS;

-- -----------------------------------------------------
-- Table `gestion_immobiliere`.`locataire`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `gestion_immobiliere`.`locataire` ;

SHOW WARNINGS;
CREATE TABLE IF NOT EXISTS `gestion_immobiliere`.`locataire` (
  `id_locataire` INT NOT NULL AUTO_INCREMENT,
  `id_utilisateur` INT NULL DEFAULT NULL,
  PRIMARY KEY (`id_locataire`),
  CONSTRAINT `fk_locataire_utilisateur`
    FOREIGN KEY (`id_utilisateur`)
    REFERENCES `gestion_immobiliere`.`utilisateur` (`id_utilisateur`)
    ON DELETE CASCADE)
ENGINE = InnoDB
AUTO_INCREMENT = 33
DEFAULT CHARACTER SET = utf8mb4
COLLATE = utf8mb4_0900_ai_ci;

SHOW WARNINGS;
CREATE INDEX `fk_locataire_utilisateur` ON `gestion_immobiliere`.`locataire` (`id_utilisateur` ASC) VISIBLE;

SHOW WARNINGS;

-- -----------------------------------------------------
-- Table `gestion_immobiliere`.`location`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `gestion_immobiliere`.`location` ;

SHOW WARNINGS;
CREATE TABLE IF NOT EXISTS `gestion_immobiliere`.`location` (
  `id_location` INT NOT NULL AUTO_INCREMENT,
  `id_bien` INT NOT NULL,
  `date_debut` DATE NOT NULL,
  `date_fin` DATE NOT NULL,
  `prix` INT NOT NULL,
  `id_locataire` INT NOT NULL,
  `etat` ENUM('retard', 'payée', 'non_payée', 'annuler', 'terminé') NOT NULL DEFAULT 'non_payée',
  `payment` INT NULL DEFAULT '0',
  PRIMARY KEY (`id_location`),
  CONSTRAINT `fk_location_bien`
    FOREIGN KEY (`id_bien`)
    REFERENCES `gestion_immobiliere`.`bien` (`id_bien`)
    ON DELETE CASCADE,
  CONSTRAINT `fk_location_locataire`
    FOREIGN KEY (`id_locataire`)
    REFERENCES `gestion_immobiliere`.`locataire` (`id_locataire`)
    ON DELETE CASCADE)
ENGINE = InnoDB
AUTO_INCREMENT = 2
DEFAULT CHARACTER SET = utf8mb4
COLLATE = utf8mb4_0900_ai_ci;

SHOW WARNINGS;
CREATE INDEX `fk_location_bien` ON `gestion_immobiliere`.`location` (`id_bien` ASC) VISIBLE;

SHOW WARNINGS;
CREATE INDEX `fk_location_locataire` ON `gestion_immobiliere`.`location` (`id_locataire` ASC) VISIBLE;

SHOW WARNINGS;

-- -----------------------------------------------------
-- Table `gestion_immobiliere`.`offre`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `gestion_immobiliere`.`offre` ;

SHOW WARNINGS;
CREATE TABLE IF NOT EXISTS `gestion_immobiliere`.`offre` (
  `id_offre` INT NOT NULL AUTO_INCREMENT,
  `id_agent` INT NULL DEFAULT NULL,
  `id_bien` INT NULL DEFAULT NULL,
  `montant` DECIMAL(10,2) NULL DEFAULT NULL,
  `date_debut` DATE NULL DEFAULT NULL,
  `date_fin` DATE NULL DEFAULT NULL,
  `type` ENUM('location', 'vente') NOT NULL,
  `etat` ENUM('actif', 'expire') NOT NULL DEFAULT 'actif',
  PRIMARY KEY (`id_offre`),
  CONSTRAINT `fk_offre_agent`
    FOREIGN KEY (`id_agent`)
    REFERENCES `gestion_immobiliere`.`agent` (`id_agent`)
    ON DELETE CASCADE,
  CONSTRAINT `fk_offre_bien`
    FOREIGN KEY (`id_bien`)
    REFERENCES `gestion_immobiliere`.`bien` (`id_bien`)
    ON DELETE CASCADE)
ENGINE = InnoDB
AUTO_INCREMENT = 30
DEFAULT CHARACTER SET = utf8mb4
COLLATE = utf8mb4_0900_ai_ci;

SHOW WARNINGS;
CREATE INDEX `fk_offre_agent` ON `gestion_immobiliere`.`offre` (`id_agent` ASC) VISIBLE;

SHOW WARNINGS;
CREATE INDEX `fk_offre_bien` ON `gestion_immobiliere`.`offre` (`id_bien` ASC) VISIBLE;

SHOW WARNINGS;

-- -----------------------------------------------------
-- Table `gestion_immobiliere`.`paiement_loyer`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `gestion_immobiliere`.`paiement_loyer` ;

SHOW WARNINGS;
CREATE TABLE IF NOT EXISTS `gestion_immobiliere`.`paiement_loyer` (
  `id_paiement` INT NOT NULL AUTO_INCREMENT,
  `id_locataire` INT NULL DEFAULT NULL,
  `id_location` INT NULL DEFAULT NULL,
  `montant` DECIMAL(10,2) NULL DEFAULT NULL,
  `date_paiement` DATE NULL DEFAULT NULL,
  PRIMARY KEY (`id_paiement`),
  CONSTRAINT `fk_paiement_locataire`
    FOREIGN KEY (`id_locataire`)
    REFERENCES `gestion_immobiliere`.`locataire` (`id_locataire`)
    ON DELETE CASCADE,
  CONSTRAINT `fk_paiement_location`
    FOREIGN KEY (`id_location`)
    REFERENCES `gestion_immobiliere`.`location` (`id_location`)
    ON DELETE CASCADE)
ENGINE = InnoDB
DEFAULT CHARACTER SET = utf8mb4
COLLATE = utf8mb4_0900_ai_ci;

SHOW WARNINGS;
CREATE INDEX `fk_paiement_locataire` ON `gestion_immobiliere`.`paiement_loyer` (`id_locataire` ASC) VISIBLE;

SHOW WARNINGS;
CREATE INDEX `fk_paiement_location` ON `gestion_immobiliere`.`paiement_loyer` (`id_location` ASC) VISIBLE;

SHOW WARNINGS;

-- -----------------------------------------------------
-- Table `gestion_immobiliere`.`proprietaire`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `gestion_immobiliere`.`proprietaire` ;

SHOW WARNINGS;
CREATE TABLE IF NOT EXISTS `gestion_immobiliere`.`proprietaire` (
  `id_proprietaire` INT NOT NULL AUTO_INCREMENT,
  `id_utilisateur` INT NULL DEFAULT NULL,
  PRIMARY KEY (`id_proprietaire`),
  CONSTRAINT `fk_proprietaire_utilisateur`
    FOREIGN KEY (`id_utilisateur`)
    REFERENCES `gestion_immobiliere`.`utilisateur` (`id_utilisateur`)
    ON DELETE CASCADE)
ENGINE = InnoDB
AUTO_INCREMENT = 23
DEFAULT CHARACTER SET = utf8mb4
COLLATE = utf8mb4_0900_ai_ci;

SHOW WARNINGS;
CREATE INDEX `fk_proprietaire_utilisateur` ON `gestion_immobiliere`.`proprietaire` (`id_utilisateur` ASC) VISIBLE;

SHOW WARNINGS;

-- -----------------------------------------------------
-- Table `gestion_immobiliere`.`rapport`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `gestion_immobiliere`.`rapport` ;

SHOW WARNINGS;
CREATE TABLE IF NOT EXISTS `gestion_immobiliere`.`rapport` (
  `id_rapport` INT NOT NULL AUTO_INCREMENT,
  `id_agent` INT NULL DEFAULT NULL,
  `description` TEXT NULL DEFAULT NULL,
  `date_creation` DATE NULL DEFAULT NULL,
  PRIMARY KEY (`id_rapport`),
  CONSTRAINT `fk_rapport_agent`
    FOREIGN KEY (`id_agent`)
    REFERENCES `gestion_immobiliere`.`agent` (`id_agent`)
    ON DELETE CASCADE)
ENGINE = InnoDB
DEFAULT CHARACTER SET = utf8mb4
COLLATE = utf8mb4_0900_ai_ci;

SHOW WARNINGS;
CREATE INDEX `fk_rapport_agent` ON `gestion_immobiliere`.`rapport` (`id_agent` ASC) VISIBLE;

SHOW WARNINGS;

-- -----------------------------------------------------
-- Table `gestion_immobiliere`.`rapport_financiere`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `gestion_immobiliere`.`rapport_financiere` ;

SHOW WARNINGS;
CREATE TABLE IF NOT EXISTS `gestion_immobiliere`.`rapport_financiere` (
  `id_rapport_financier` INT NOT NULL AUTO_INCREMENT,
  `id_proprietaire` INT NULL DEFAULT NULL,
  `id_transaction` INT NULL DEFAULT NULL,
  `montant` DECIMAL(10,2) NULL DEFAULT NULL,
  `date_rapport` DATE NULL DEFAULT NULL,
  PRIMARY KEY (`id_rapport_financier`),
  CONSTRAINT `fk_rapport_financier_proprietaire`
    FOREIGN KEY (`id_proprietaire`)
    REFERENCES `gestion_immobiliere`.`proprietaire` (`id_proprietaire`)
    ON DELETE CASCADE,
  CONSTRAINT `fk_rapport_financier_transaction`
    FOREIGN KEY (`id_transaction`)
    REFERENCES `gestion_immobiliere`.`transaction` (`id_transaction`)
    ON DELETE CASCADE)
ENGINE = InnoDB
DEFAULT CHARACTER SET = utf8mb4
COLLATE = utf8mb4_0900_ai_ci;

SHOW WARNINGS;
CREATE INDEX `fk_rapport_financier_proprietaire` ON `gestion_immobiliere`.`rapport_financiere` (`id_proprietaire` ASC) VISIBLE;

SHOW WARNINGS;
CREATE INDEX `fk_rapport_financier_transaction` ON `gestion_immobiliere`.`rapport_financiere` (`id_transaction` ASC) VISIBLE;

SHOW WARNINGS;

-- -----------------------------------------------------
-- Table `gestion_immobiliere`.`transaction`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `gestion_immobiliere`.`transaction` ;

SHOW WARNINGS;
CREATE TABLE IF NOT EXISTS `gestion_immobiliere`.`transaction` (
  `id_transaction` INT NOT NULL AUTO_INCREMENT,
  `montant` DECIMAL(10,2) NULL DEFAULT NULL,
  `date_transaction` TIMESTAMP NULL DEFAULT CURRENT_TIMESTAMP,
  `id_vente` INT NULL DEFAULT NULL,
  `id_location` INT NULL DEFAULT NULL,
  PRIMARY KEY (`id_transaction`),
  CONSTRAINT `fk_transaction_location`
    FOREIGN KEY (`id_location`)
    REFERENCES `gestion_immobiliere`.`location` (`id_location`)
    ON DELETE CASCADE,
  CONSTRAINT `fk_transaction_vente`
    FOREIGN KEY (`id_vente`)
    REFERENCES `gestion_immobiliere`.`vente` (`id_vente`)
    ON DELETE CASCADE)
ENGINE = InnoDB
AUTO_INCREMENT = 5
DEFAULT CHARACTER SET = utf8mb4
COLLATE = utf8mb4_0900_ai_ci;

SHOW WARNINGS;
CREATE INDEX `fk_transaction_vente` ON `gestion_immobiliere`.`transaction` (`id_vente` ASC) VISIBLE;

SHOW WARNINGS;
CREATE INDEX `fk_transaction_location` ON `gestion_immobiliere`.`transaction` (`id_location` ASC) VISIBLE;

SHOW WARNINGS;

-- -----------------------------------------------------
-- Table `gestion_immobiliere`.`utilisateur`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `gestion_immobiliere`.`utilisateur` ;

SHOW WARNINGS;
CREATE TABLE IF NOT EXISTS `gestion_immobiliere`.`utilisateur` (
  `id_utilisateur` INT NOT NULL AUTO_INCREMENT,
  `nom` VARCHAR(40) NULL DEFAULT NULL,
  `prenom` VARCHAR(40) NULL DEFAULT NULL,
  `email` VARCHAR(60) NULL DEFAULT NULL,
  `mot_de_passe` VARCHAR(100) NULL DEFAULT NULL,
  `role` ENUM('agent', 'proprietaire', 'locataire', 'admin', 'visit') NULL DEFAULT NULL,
  `date_creation` DATETIME NULL DEFAULT NULL,
  `telephone` VARCHAR(12) NULL DEFAULT NULL,
  PRIMARY KEY (`id_utilisateur`))
ENGINE = InnoDB
AUTO_INCREMENT = 119
DEFAULT CHARACTER SET = utf8mb4
COLLATE = utf8mb4_0900_ai_ci;

SHOW WARNINGS;
CREATE INDEX `idx_emails` ON `gestion_immobiliere`.`utilisateur` (`email` ASC) VISIBLE;

SHOW WARNINGS;
CREATE INDEX `idx_password` ON `gestion_immobiliere`.`utilisateur` (`mot_de_passe` ASC) VISIBLE;

SHOW WARNINGS;

-- -----------------------------------------------------
-- Table `gestion_immobiliere`.`vente`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `gestion_immobiliere`.`vente` ;

SHOW WARNINGS;
CREATE TABLE IF NOT EXISTS `gestion_immobiliere`.`vente` (
  `id_vente` INT NOT NULL AUTO_INCREMENT,
  `id_bien` INT NULL DEFAULT NULL,
  `id_agent` INT NULL DEFAULT NULL,
  `id_proprietaire` INT NULL DEFAULT NULL,
  `date_vente` DATE NULL DEFAULT NULL,
  `montant_paye` DECIMAL(10,2) NULL DEFAULT NULL,
  `etat` ENUM('payée', 'non_payée') NOT NULL DEFAULT 'non_payée',
  `prix` DECIMAL(10,2) NULL DEFAULT NULL,
  PRIMARY KEY (`id_vente`),
  CONSTRAINT `fk_vente_agent`
    FOREIGN KEY (`id_agent`)
    REFERENCES `gestion_immobiliere`.`agent` (`id_agent`)
    ON DELETE CASCADE,
  CONSTRAINT `fk_vente_bien`
    FOREIGN KEY (`id_bien`)
    REFERENCES `gestion_immobiliere`.`bien` (`id_bien`)
    ON DELETE CASCADE,
  CONSTRAINT `fk_vente_proprietaire`
    FOREIGN KEY (`id_proprietaire`)
    REFERENCES `gestion_immobiliere`.`proprietaire` (`id_proprietaire`)
    ON DELETE CASCADE)
ENGINE = InnoDB
AUTO_INCREMENT = 6
DEFAULT CHARACTER SET = utf8mb4
COLLATE = utf8mb4_0900_ai_ci;

SHOW WARNINGS;
CREATE INDEX `fk_vente_bien` ON `gestion_immobiliere`.`vente` (`id_bien` ASC) VISIBLE;

SHOW WARNINGS;
CREATE INDEX `fk_vente_agent` ON `gestion_immobiliere`.`vente` (`id_agent` ASC) VISIBLE;

SHOW WARNINGS;
CREATE INDEX `fk_vente_proprietaire` ON `gestion_immobiliere`.`vente` (`id_proprietaire` ASC) VISIBLE;

SHOW WARNINGS;

SET SQL_MODE=@OLD_SQL_MODE;
SET FOREIGN_KEY_CHECKS=@OLD_FOREIGN_KEY_CHECKS;
SET UNIQUE_CHECKS=@OLD_UNIQUE_CHECKS;
USE `gestion_immobiliere`;

DELIMITER $$

USE `gestion_immobiliere`$$
DROP TRIGGER IF EXISTS `gestion_immobiliere`.`before_delete_bien` $$
SHOW WARNINGS$$
USE `gestion_immobiliere`$$
CREATE
DEFINER=`root`@`localhost`
TRIGGER `gestion_immobiliere`.`before_delete_bien`
BEFORE DELETE ON `gestion_immobiliere`.`bien`
FOR EACH ROW
BEGIN
    -- Vérifie si le bien est présent dans la table des vente actives
    
    IF EXISTS (
        SELECT 1
        FROM vente
        WHERE id_bien = OLD.id_bien
        AND etat = "payée"
    ) THEN
        SIGNAL SQLSTATE '45000'
        SET MESSAGE_TEXT = 'Impossible de supprimer ce bien car il est associé à une vente non terminée.';
    END IF;

    -- Vérifie si le bien est présent dans la table des locations actives
    IF EXISTS (
        SELECT 1
        FROM location
        WHERE id_bien = OLD.id_bien
    ) THEN
        SIGNAL SQLSTATE '45000'
        SET MESSAGE_TEXT = 'Impossible de supprimer ce bien car il est associé à une location active.';
    END IF;
    
END$$

SHOW WARNINGS$$

USE `gestion_immobiliere`$$
DROP TRIGGER IF EXISTS `gestion_immobiliere`.`before_insert_bien` $$
SHOW WARNINGS$$
USE `gestion_immobiliere`$$
CREATE
DEFINER=`root`@`localhost`
TRIGGER `gestion_immobiliere`.`before_insert_bien`
BEFORE INSERT ON `gestion_immobiliere`.`bien`
FOR EACH ROW
BEGIN
    -- Vérifie si un bien avec la même adresse et le même propriétaire existe déjà
    IF EXISTS (
        SELECT 1
        FROM bien
        WHERE adresse = NEW.adresse
        AND ville = NEW.ville
    ) THEN
        -- Bloque l'insertion en levant une erreur
        SIGNAL SQLSTATE '45000'
        SET MESSAGE_TEXT = 'Ce bien existe déjà dans la base de données.';
    END IF;
END$$

SHOW WARNINGS$$

USE `gestion_immobiliere`$$
DROP TRIGGER IF EXISTS `gestion_immobiliere`.`after_update_location` $$
SHOW WARNINGS$$
USE `gestion_immobiliere`$$
CREATE
DEFINER=`root`@`localhost`
TRIGGER `gestion_immobiliere`.`after_update_location`
AFTER UPDATE ON `gestion_immobiliere`.`location`
FOR EACH ROW
BEGIN
    DECLARE dat DATE;

    -- Récupérer la date de fin (date_fin) après la mise à jour de la location
    SELECT date_fin INTO dat
    FROM location
    WHERE id_location = NEW.id_location;

    -- Vérifie si la date actuelle est supérieure à la date de fin
    IF (CURDATE() > dat) THEN
        -- Mettre à jour l'état de la location en 'terminé'
        UPDATE location
        SET etat = 'terminé'
        WHERE id_location = NEW.id_location;
    END IF;
END$$

SHOW WARNINGS$$

USE `gestion_immobiliere`$$
DROP TRIGGER IF EXISTS `gestion_immobiliere`.`creation_loc` $$
SHOW WARNINGS$$
USE `gestion_immobiliere`$$
CREATE
DEFINER=`root`@`localhost`
TRIGGER `gestion_immobiliere`.`creation_loc`
BEFORE INSERT ON `gestion_immobiliere`.`location`
FOR EACH ROW
begin
declare prix int;

select montant into prix
from offre where
id_bien=new.id_bien and etat="actif";

set new.prix = prix;

end$$

SHOW WARNINGS$$

USE `gestion_immobiliere`$$
DROP TRIGGER IF EXISTS `gestion_immobiliere`.`mise_etat_bien_loc` $$
SHOW WARNINGS$$
USE `gestion_immobiliere`$$
CREATE
DEFINER=`root`@`localhost`
TRIGGER `gestion_immobiliere`.`mise_etat_bien_loc`
AFTER INSERT ON `gestion_immobiliere`.`location`
FOR EACH ROW
BEGIN
   
        UPDATE bien
        SET etat = 'loue'
        WHERE id_bien = NEW.id_bien;
   
END$$

SHOW WARNINGS$$

USE `gestion_immobiliere`$$
DROP TRIGGER IF EXISTS `gestion_immobiliere`.`before_insert_offre` $$
SHOW WARNINGS$$
USE `gestion_immobiliere`$$
CREATE
DEFINER=`admin`@`localhost`
TRIGGER `gestion_immobiliere`.`before_insert_offre`
BEFORE INSERT ON `gestion_immobiliere`.`offre`
FOR EACH ROW
BEGIN
    -- Ensure the date range is valid
    IF NEW.date_debut >= NEW.date_fin THEN
        SIGNAL SQLSTATE '45000'
        SET MESSAGE_TEXT = 'The start date must be earlier than the end date.';
    END IF;

    -- Ensure the property exists before creating the offer
    IF NOT EXISTS (SELECT 1 FROM bien WHERE id_bien = NEW.id_bien) THEN
        SIGNAL SQLSTATE '45000'
        SET MESSAGE_TEXT = 'The property (bien) does not exist.';
    END IF;

    -- Update the property status based on the type
    IF NEW.type = 'location' THEN
        UPDATE bien 
        SET etat = 'loue' 
        WHERE id_bien = NEW.id_bien;
    ELSE
        UPDATE bien 
        SET etat = 'vendu' 
        WHERE id_bien = NEW.id_bien;
    END IF;
END$$

SHOW WARNINGS$$

USE `gestion_immobiliere`$$
DROP TRIGGER IF EXISTS `gestion_immobiliere`.`fin_offre` $$
SHOW WARNINGS$$
USE `gestion_immobiliere`$$
CREATE
DEFINER=`root`@`localhost`
TRIGGER `gestion_immobiliere`.`fin_offre`
BEFORE UPDATE ON `gestion_immobiliere`.`offre`
FOR EACH ROW
begin

if(new.date_fin<CURDATE())then
	
    update offre
    set etat="expiree"
    where id_offre=new.id_offre;

end if;	


end$$

SHOW WARNINGS$$

USE `gestion_immobiliere`$$
DROP TRIGGER IF EXISTS `gestion_immobiliere`.`update_location_etat` $$
SHOW WARNINGS$$
USE `gestion_immobiliere`$$
CREATE
DEFINER=`root`@`localhost`
TRIGGER `gestion_immobiliere`.`update_location_etat`
AFTER INSERT ON `gestion_immobiliere`.`paiement_loyer`
FOR EACH ROW
BEGIN
    DECLARE total_paye DECIMAL(10,2);
    DECLARE prix_location INT;
    DECLARE nb_mois INT;
    DECLARE montant_du INT;
    DECLARE mois_en_cours DATE;
    DECLARE paiement_suffisant BOOLEAN;
    DECLARE paiement_mois_en_cours DECIMAL(10,2);
    DECLARE paiement_mois_prec BOOLEAN;

    -- Récupérer le prix de la location et la date de début et de fin
    SELECT prix, date_debut, date_fin INTO prix_location, @date_debut, @date_fin
    FROM location
    WHERE id_location = NEW.id_location;

    -- Calculer le nombre de mois de la location
    SET nb_mois = TIMESTAMPDIFF(MONTH, @date_debut, @date_fin);

    -- Calculer le montant total dû pour la période
    SET montant_du = prix_location * nb_mois;

    -- Calculer le paiement total effectué jusqu'à maintenant
    SELECT IFNULL(SUM(montant), 0) INTO total_paye
    FROM paiement_loyer
    WHERE id_location = NEW.id_location;

    -- Vérifier le paiement du mois en cours
    SET mois_en_cours = CURDATE();
    SELECT IFNULL(SUM(montant), 0) INTO paiement_mois_en_cours
    FROM paiement_loyer
    WHERE id_location = NEW.id_location AND date_paiement >= @date_debut AND date_paiement <= mois_en_cours;
	
    -- Vérifier si le mois précédent a été payé
    SET paiement_mois_prec = (total_paye >= prix_location*(TIMESTAMPDIFF(MONTH, @date_debut, CURDATE())));

    -- Si le paiement total est suffisant pour couvrir tous les mois jusqu'à aujourd'hui, marquer comme "payée"
    IF total_paye >= montant_du THEN
        UPDATE location
        SET etat = 'payée'
        WHERE id_location = NEW.id_location;

    -- Si le paiement n'est pas suffisant pour couvrir les mois précédents, marquer comme "retard"
    ELSEIF paiement_mois_prec = 0 THEN
        UPDATE location
        SET etat = 'retard'
        WHERE id_location = NEW.id_location;

    -- Si le paiement n'est pas suffisant pour le mois en cours, marquer comme "non_payée"
    ELSE
        UPDATE location
        SET etat = 'non_payée'
        WHERE id_location = NEW.id_location;
    END IF;
END$$

SHOW WARNINGS$$

USE `gestion_immobiliere`$$
DROP TRIGGER IF EXISTS `gestion_immobiliere`.`after_insert_transaction_location` $$
SHOW WARNINGS$$
USE `gestion_immobiliere`$$
CREATE
DEFINER=`root`@`localhost`
TRIGGER `gestion_immobiliere`.`after_insert_transaction_location`
AFTER INSERT ON `gestion_immobiliere`.`transaction`
FOR EACH ROW
BEGIN
    -- Insert a payment record for the rental in the paiement_loyer table
    IF NEW.id_location IS NOT NULL THEN
        INSERT INTO paiement_loyer (id_locataire, id_location, montant, date_paiement)
        SELECT l.id_locataire, NEW.id_location, NEW.montant, NEW.date_transaction
        FROM location l
        WHERE l.id_location = NEW.id_location;
    END IF;
END$$

SHOW WARNINGS$$

USE `gestion_immobiliere`$$
DROP TRIGGER IF EXISTS `gestion_immobiliere`.`after_insert_transaction_vente` $$
SHOW WARNINGS$$
USE `gestion_immobiliere`$$
CREATE
DEFINER=`root`@`localhost`
TRIGGER `gestion_immobiliere`.`after_insert_transaction_vente`
AFTER INSERT ON `gestion_immobiliere`.`transaction`
FOR EACH ROW
BEGIN
    -- Update the paid amount for the sale in the vente table
    IF NEW.id_vente IS NOT NULL THEN
        UPDATE vente
        SET montant_paye = montant_paye + NEW.montant
        WHERE id_vente = NEW.id_vente;
    END IF;
END$$

SHOW WARNINGS$$

USE `gestion_immobiliere`$$
DROP TRIGGER IF EXISTS `gestion_immobiliere`.`rapport_finance` $$
SHOW WARNINGS$$
USE `gestion_immobiliere`$$
CREATE
DEFINER=`root`@`localhost`
TRIGGER `gestion_immobiliere`.`rapport_finance`
AFTER INSERT ON `gestion_immobiliere`.`transaction`
FOR EACH ROW
begin 
declare id_prop int;
if (new.id_vente <> null)then

select id_proprietaire into id_prop
from vente
where id_vente=new.id_vente;

insert into rapport_financiere (id_proprietaire,id_transaction,montant,date_rapport)
values (id_prop,new.id_transaction,new.montant,new.date_transaction);

end if; 

end$$

SHOW WARNINGS$$

USE `gestion_immobiliere`$$
DROP TRIGGER IF EXISTS `gestion_immobiliere`.`after_user_insert` $$
SHOW WARNINGS$$
USE `gestion_immobiliere`$$
CREATE
DEFINER=`root`@`localhost`
TRIGGER `gestion_immobiliere`.`after_user_insert`
AFTER INSERT ON `gestion_immobiliere`.`utilisateur`
FOR EACH ROW
BEGIN
    -- Insert into the 'agent' table if the role is 'agent'
    IF NEW.role = 'agent' THEN
        INSERT INTO agent (id_utilisateur)
        VALUES (NEW.id_utilisateur);
    END IF;

    -- Insert into the 'proprietaire' table if the role is 'proprietaire'
    IF NEW.role = 'proprietaire' THEN
        INSERT INTO proprietaire (id_utilisateur)
        VALUES (NEW.id_utilisateur);
    END IF;

    -- Insert into the 'locataire' table if the role is 'locataire'
    IF NEW.role = 'locataire' THEN
        INSERT INTO locataire (id_utilisateur)
        VALUES (NEW.id_utilisateur);
    END IF;

    -- Insert into the 'admin' table if the role is 'admin'
    IF NEW.role = 'admin' THEN
        INSERT INTO administrateur (id_utilisateur)
        VALUES (NEW.id_utilisateur);
    END IF;
END$$

SHOW WARNINGS$$

USE `gestion_immobiliere`$$
DROP TRIGGER IF EXISTS `gestion_immobiliere`.`date_insert` $$
SHOW WARNINGS$$
USE `gestion_immobiliere`$$
CREATE
DEFINER=`root`@`localhost`
TRIGGER `gestion_immobiliere`.`date_insert`
BEFORE INSERT ON `gestion_immobiliere`.`utilisateur`
FOR EACH ROW
BEGIN


DECLARE existing_mail INT ;



SELECT COUNT(*)
INTO existing_mail
FROM utilisateur
WHERE email = NEW.email;

IF existing_mail > 0 THEN
        SIGNAL SQLSTATE '45000'
        SET MESSAGE_TEXT = 'Duplicate email entry is not allowed!';
END IF;
SET NEW.date_creation = NOW();
END$$

SHOW WARNINGS$$

USE `gestion_immobiliere`$$
DROP TRIGGER IF EXISTS `gestion_immobiliere`.`mise_etat_bien_ven` $$
SHOW WARNINGS$$
USE `gestion_immobiliere`$$
CREATE
DEFINER=`root`@`localhost`
TRIGGER `gestion_immobiliere`.`mise_etat_bien_ven`
AFTER INSERT ON `gestion_immobiliere`.`vente`
FOR EACH ROW
BEGIN
    
        UPDATE bien
        SET etat = 'vendu'
        WHERE id_bien = NEW.id_bien;
        
END$$

SHOW WARNINGS$$

USE `gestion_immobiliere`$$
DROP TRIGGER IF EXISTS `gestion_immobiliere`.`vente_update` $$
SHOW WARNINGS$$
USE `gestion_immobiliere`$$
CREATE
DEFINER=`root`@`localhost`
TRIGGER `gestion_immobiliere`.`vente_update`
AFTER UPDATE ON `gestion_immobiliere`.`vente`
FOR EACH ROW
begin

if (new.montant_paye>=new.prix) then
	update vente 
    set etat='payée'
    where id_vente=new.id_vente;
end if;



end$$

SHOW WARNINGS$$

DELIMITER ;
